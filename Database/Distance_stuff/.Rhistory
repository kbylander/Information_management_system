name <- names(fasta2)[2]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[2]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
Genpofad(fasta1, fasta3)
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
length <- length(fasta2)
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[1]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[1]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
fasta3
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[2]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[2]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
length <- length(fasta2)
for (i in length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
length
for (i in length) {}
for (i in length){
paste(i)
}
length
for (i in length){
print(i)
}
for (i in 1:length){
print(i)
}
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Proj_functions.R")
# Load the output results
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fastaFile1 <- readDNAStringSet(fasta1)
seq_name1 = names(fastaFile1)
# Gendistvalues
measurements <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php"
meas_vec <- vector()
fileName1 <- measurements
conn1 <- file(fileName1,open="r")
linn1 <-readLines(conn1)
for (i in 1:length(linn1)){
meas_vec <- append(meas_vec, linn1[i])
}
close(conn1)
# Sequence names
sequence_name <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php"
seq_vec <- vector()
fileName2 <- sequence_name
conn2 <- file(fileName2,open="r")
linn2 <-readLines(conn2)
for (i in 1:length(linn2)){
seq_vec <- append(seq_vec, linn2[i])
}
close(conn2)
#view table
sink("output/table.php")
test <- matrix(meas_vec,ncol=1,byrow=TRUE)
colnames(test) <- c(seq_name1)
rownames(test) <- c(seq_vec)
test <- as.table(test)
test
sink()
# Load the output results
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta1
fastaFile1 <- readDNAStringSet(fasta1)
seq_name1 = names(fastaFile1)
seq_name1
# Gendistvalues
measurements <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php"
measurements
meas_vec <- vector()
fileName1 <- measurements
conn1 <- file(fileName1,open="r")
linn1 <-readLines(conn1)
for (i in 1:length(linn1)){
meas_vec <- append(meas_vec, linn1[i])
}
close(conn1)
meas_vec
# Sequence names
sequence_name <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php"
seq_vec <- vector()
fileName2 <- sequence_name
conn2 <- file(fileName2,open="r")
linn2 <-readLines(conn2)
for (i in 1:length(linn2)){
seq_vec <- append(seq_vec, linn2[i])
}
close(conn2)
seq_vec
#view table
sink("output/table.php")
#view table
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/table.php")
test <- matrix(meas_vec,ncol=1,byrow=TRUE)
colnames(test) <- c(seq_name1)
rownames(test) <- c(seq_vec)
test <- as.table(test)
test
sink()
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
length <- length(fasta2)
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Matchstates(fastsa1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
for (i in 1:1) {
print(i)
}
for (i in 0:1) {
print(i)
}
for (i in 0:1) {
paste(i)
}
for (i in 1:2) {
paste(i)
}
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
length <- length(fasta2)
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Daredevil(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
for (i in 1:2) {
paste(i)
}
length <- 2
for (i in 1:length) {
paste(i)
}
sink()
for (i in 1:length) {
paste(i)
}
for (i in 1:length) {
print(i)
}
for (i in 1:1) {
print(i)
}
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test2.fasta"
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
length <- length(fasta2)
length
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Daredevil(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
fasta2
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test2.fasta")
length <- length(fasta2)
length
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
result <- Daredevil(fasta1, fasta3)
cat(result)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Fasta1.fasta"
readDNAStringSet(fasta1)
fasta1
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Fasta2.fasta")
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Fasta1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Fasta2.fasta")
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Fasta_test/fasta2.fasta")
fasta2
paste(fasta2)
length(paste(fasta2))
cat((paste(fasta2)))
1 <- cat((paste(fasta2)))
abc <- cat((paste(fasta2)))
length(abc)
nchar(abc)
nchar(paste(fasta2))
paste(fasta2)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd('../..')
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Algorithms/Proj_functions.R")
fasta1 <- "Algorithms/input/Fasta1.fasta"
fasta2 <- readDNAStringSet("Algorithms/input/Fasta2.fasta")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
setwd('../..')
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Algorithms/Proj_functions.R")
fasta1 <- "Algorithms/input/Fasta1.fasta"
fasta2 <- readDNAStringSet("Algorithms/input/Fasta2.fasta")
length <- length(fasta2)
for (i in 1:length)
{
# Create file with 1 fasta sequence
sink("Algorithms/output_file/fastafile.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta3 <- "Algorithms/output_file/fastafile.php"
# Store output in array, append after each iteration.
sink("Algorithms/output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta3)
cat(result)
sink()
sink("Algorithms/output/output.php", append = TRUE)
cat("\n")
sink()
sink("Algorithms/output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta3)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("Algorithms/output/seqname.php", append = TRUE)
cat("\n")
sink()
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd()
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd()
getwd()
setwd('../..')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
setwd('../..')
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Algorithms/Proj_functions.R")
sink("Algorithms/output_file/fastafile.php")
1+1
sink()
file.choose(Matchstates.R)
fdir <- file.path("~/Matchstates.R")
fdir
list.files(fdir)
dirname(file.choose())
file.choose()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
setwd('../..')
etwd()
getwd()
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Algorithms/Proj_functions.R")
getwd()
$path
getActiveDocumentContext()$path)
getActiveDocumentContext()$path
getActiveDocumentContext()
dirname(getActiveDocumentContext()$path)
dirname(getActiveDocumentContext()$path)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
setwd(..)
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("../Proj_functions.R")
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Database/TempFastaFiles/Fasta1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Database/TempFastaFiles//Fasta2.fasta")
fasta2
