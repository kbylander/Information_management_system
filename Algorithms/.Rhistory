cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
install.packages("devtools")
library("devtools")
install_github("simjoly/pofadinr")
library("pofadinr")
require(ape)
library("devtools")
library("pofadinr")
require(ape)
cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
as.character(con)
cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat("2 9",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
as.character(con)
test <- "TGCTCGAACGT"
len(test)
length(test)
num(test)
exdna.txt
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
exdna.txt
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
ex.dna
nchar(test)
cat("2 nchar(test)",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
ex.dna
test1 <- cat("2", "3")
test1 <- cat("2", test)
test1 <- cat("2", nchar(test))
cat(test1,
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
test1
test1 <- cat("2", nchar(test))
test1
test1 <- cat("2", nchar(test))
cat("2", nchar(test), file = "test2.txt")
test2.txt
open(test2.txt)
open("test2.txt")
cat("2", nchar(test), file = "test2.txt")
cat("2", nchar(test))
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2", nchar(test))
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2", nchar(test))
"2 11"
str(cat("2", nchar(test)))
str("2")
test
test1 <- nchar(test)
test1
paste(test1)
paste(test1)
paste(2, test1)
a <- paste(2, test1)
a
cat(a,
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
cat(paste(2, test1),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
cat(paste(2, nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
# 011 vs 001
df_011 <- 16
df_001 <- 17
lnL_011 <- -2803.346409
lnL_001 <- -2579.679366
LR = 2*(lnL_001 - lnL_011)
LR
df <- df_001 - df_011
df
pchisq(q = LR, df = df, lower.tail = FALSE)
# 011 vs 001
df_011 <- 16
df_001 <- 17
lnL_011 <- -2803.346409
lnL_001 <- -2579.679366
LR = 2*(lnL_001 - lnL_011)
df <- df_001 - df_011
pchisq(q = LR, df = df, lower.tail = FALSE)
# 101 vs 001
df_101 <- 31
df_001 <- 17
lnL_101 <- -2567.920457
lnL_001 <- -2579.679366
LR = 2*(lnL_101 - lnL_001)
df <- df_101 - df_001
pchisq(q = LR, df = df, lower.tail = FALSE)
LR
df
# 201 vs 211
df_201 <- 20
df_211 <- 19
lnL_201 <- -2557.343293
lnL_211 <- -2557.343293
LR = 2*(lnL_201 - lnL_211)
df <- df_201 - df_211
pchisq(q = LR, df = df, lower.tail = FALSE)
LR
df
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Connecting_to_R_failed")
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Proj_functions.R")
fasta1 <- >Test1
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms")
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
fasta2
length <- length(fasta2)
length
for (i in length)
{
# Create file with 1 fasta sequence
sink("Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
# Store output in array, append after each iteration.
sink("output/output.php", append = TRUE)
result <- Genpofad(fasta1, fasta2)
cat(result)
sink()
sink("output/output.php", append = TRUE)
cat("\n")
sink()
sink("output/seqname.php", append = TRUE)
fastaFile2 <- readDNAStringSet(fasta2)
seq_name2 = names(fastaFile2)
cat(seq_name2)
sink()
sink("output/seqname.php", append = TRUE)
cat("\n")
sink()
}
name
cat(paste0(">",name))
seq
cat(seq)
# Create file with 1 fasta sequence
sink("Test/rand.php")
name <- names(fasta2)[i]
cat(paste0(">",name))
cat("\n")
seq <- paste(fasta2)[i]
cat(seq)
sink()
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Test/rand.php"
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
length <- length(fasta2)
i = 1
# Create file with 1 fasta sequence
sink("Test/rand.php")
name <- names(fasta2)[i]
name
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
fasta2
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
fasta2
fasta1
readDNAStringSet(fasta1)
library("Biostrings")
fasta2 <- readDNAStringSet("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Multi.fasta")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/Test1.fasta"
