cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
install.packages("devtools")
library("devtools")
install_github("simjoly/pofadinr")
library("pofadinr")
require(ape)
library("devtools")
library("pofadinr")
require(ape)
cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
as.character(con)
cat("2 11",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat("2 9",
"A ATCGGTCAC",
"B ATGCGTAAA",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
con <- consensus.dna(ex.dna)
as.character(con)
test <- "TGCTCGAACGT"
len(test)
length(test)
num(test)
exdna.txt
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
exdna.txt
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
ex.dna
nchar(test)
cat("2 nchar(test)",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
ex.dna
test1 <- cat("2", "3")
test1 <- cat("2", test)
test1 <- cat("2", nchar(test))
cat(test1,
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
test1
test1 <- cat("2", nchar(test))
test1
test1 <- cat("2", nchar(test))
cat("2", nchar(test), file = "test2.txt")
test2.txt
open(test2.txt)
open("test2.txt")
cat("2", nchar(test), file = "test2.txt")
cat("2", nchar(test))
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2", nchar(test))
cat(cat("2", nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2 11",
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
cat("2", nchar(test))
"2 11"
str(cat("2", nchar(test)))
str("2")
test
test1 <- nchar(test)
test1
paste(test1)
paste(test1)
paste(2, test1)
a <- paste(2, test1)
a
cat(a,
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
cat(paste(2, test1),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
cat(paste(2, nchar(test)),
"A TRTACGTTGAC",
"B AYTAGTTAGWR",
file = "exdna.txt", sep = "\n")
# Read the alignment
ex.dna <- read.dna("exdna.txt", format = "sequential")
# Compute genpofad distance
d <- dist.snp(ex.dna, model="GENPOFAD", pairwise.deletion = TRUE)
d
# 011 vs 001
df_011 <- 16
df_001 <- 17
lnL_011 <- -2803.346409
lnL_001 <- -2579.679366
LR = 2*(lnL_001 - lnL_011)
LR
df <- df_001 - df_011
df
pchisq(q = LR, df = df, lower.tail = FALSE)
# 011 vs 001
df_011 <- 16
df_001 <- 17
lnL_011 <- -2803.346409
lnL_001 <- -2579.679366
LR = 2*(lnL_001 - lnL_011)
df <- df_001 - df_011
pchisq(q = LR, df = df, lower.tail = FALSE)
# 101 vs 001
df_101 <- 31
df_001 <- 17
lnL_101 <- -2567.920457
lnL_001 <- -2579.679366
LR = 2*(lnL_101 - lnL_001)
df <- df_101 - df_001
pchisq(q = LR, df = df, lower.tail = FALSE)
LR
df
# 201 vs 211
df_201 <- 20
df_211 <- 19
lnL_201 <- -2557.343293
lnL_211 <- -2557.343293
LR = 2*(lnL_201 - lnL_211)
df <- df_201 - df_211
pchisq(q = LR, df = df, lower.tail = FALSE)
LR
df
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms/Connecting_to_R_failed")
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Proj_functions.R")
fasta1 <- >Test1
library("pofadinr")
library("devtools")
library("Biostrings")
require(ape)
source("Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input1.fasta"
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input2.fasta"
#Genpofad(fasta1, fasta2)
Daredevil(fasta1, fasta2)
#Genpofad(fasta1, fasta2)
Hamming(fasta1, fasta2)
#Genpofad(fasta1, fasta2)
Genpofad(fasta1, fasta2)
source("Proj_functions.R")
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms")
#Genpofad(fasta1, fasta2)
Genpofad(fasta1, fasta2)
source("Proj_functions.R")
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input1.fasta"
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input2.fasta"
#Genpofad(fasta1, fasta2)
Genpofad(fasta1, fasta2)
result <- Genpofad(fasta1, fasta2)
result
result[0]
result[1]
result[2]
result[3]
result[1]
result[0]
result[1]
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms")
file <- C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input1.fasta
file <- input/input1.fasta
file <- input1.fasta
setwd("C:/MAMP/htdocs/IMS-Daredevil/Algorithms")
file <- "input/input1.fasta"
file
read(file)
read.csv(file)
read.csv(file)
test <- read.csv(file)
test
test[0]
test[1]
test[2]
file
file[0]
file[1]
file[2]
open(file)
file
readDNAStringSet(file)
names(readDNAStringSet(file))
tab <- matrix(rep(2, times=8), ncol=4, byrow=TRUE)
tab
tab <- matrix(ncol=4, byrow=TRUE)
tab
tab <- matrix(ncol=1, byrow=TRUE)
tab
fasta1 <- "input/input1.fasta"
fasta2 <- "input/input2.fasta"
fastaname1 <- names(readDNAStringSet(fasta1))
fastaname2 <- names(readDNAStringSet(fasta2))
#define column names and row names of matrix
colnames(tab) <- c(fastaname1)
rownames(tab) <- c(fastaname2)
#convert matrix to table
tab <- as.table(tab)
#view table
tab
result
result[1]
test <- matrix(c(result[1]),ncol=1,byrow=TRUE)
colnames(test) <- c(fastaname1)
rownames(test) <- c(fastaname2)
test <- as.table(test)
test
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input1.fasta"
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input2.fasta"
result <- Genpofad(fasta1, fasta2)
fastaname1 <- names(readDNAStringSet(fasta1))
fastaname2 <- names(readDNAStringSet(fasta2))
test <- matrix(c(result[1]),ncol=1,byrow=TRUE)
colnames(test) <- c(fastaname1)
rownames(test) <- c(fastaname2)
test <- as.table(test)
test
test
fasta1 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input1.fasta"
fasta2 <- "C:/MAMP/htdocs/IMS-Daredevil/Algorithms/input/input2.fasta"
result <- Genpofad(fasta1, fasta2)
fastaname1 <- names(readDNAStringSet(fasta1))
fastaname2 <- names(readDNAStringSet(fasta2))
#view table
test <- matrix(c(result[1]),ncol=1,byrow=TRUE)
colnames(test) <- c(fastaname1)
rownames(test) <- c(fastaname2)
test <- as.table(test)
test
str(test)
test$"hello"
